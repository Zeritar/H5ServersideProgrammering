@using H5ServersideProgrammering.Repository;
@using H5ServersideProgrammering.Data;
@using H5ServersideProgrammering.Handlers;
@using System.Security.Claims
@page "/"

@attribute [Microsoft.AspNetCore.Authorization.Authorize(Policy = "AuthenticatedUser")]
@inject IUserCPRRepository UserCprRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HashingHandler HashingHandler
@inject AsymmetricEncryptionHandler AsymmetricEncryptionHandler
@inject ITodoRepository TodoRepository

<PageTitle>Home</PageTitle>



<!DOCTYPE html>
<html>
<head>
    <title>User CPR Input</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .container {
            width: 300px;
            margin: 0 auto;
        }

        input,
        button {
            width: 100%;
            margin: 5px 0;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
            button {
                background-color: #007bff;
                color: #fff;
                cursor: pointer;
                width: 100%;
            }
                button:hover {
                    background-color: #0056b3;
                }
    </style>
</head>
<body>
    <div class="container">
        <div>
            <AuthorizeView>
                <Authorized>
                    <h1>@context.User.Identity?.Name!</h1>
                    @if (message != null)
                    {
                        <h2>@message</h2>
                    }
                </Authorized>
            </AuthorizeView>
            @if (!cprValidated)
            {
                <label for="cpr">Indtast dit cpr-nr:</label>
                <input type="text" @bind="CprValue" id="cpr" name="cpr" maxlength="10" required />
            }
            else
            {
                <label for="todo">Add Todo Item:</label>
                <input type="text" @bind="TodoValue" id="todo" name="todo" />
            }
            <button @onclick="OnSubmit">Submit</button>
        </div>

        <AuthorizeView>
            <Authorized>
                @if (cprValidated && items.Count > 0)
                {
                    <ul>
                        @foreach (var item in items)
                        {
                            <li>
                                @item.ItemText
                                <button @onclick="() => RemoveTodoItem(item)">Remove</button>
                            </li>
                        }
                    </ul>
                }
            </Authorized>
        </AuthorizeView>

        @code {
                string? UserID;
                UserCpr? userCpr;
                string? CprValue;
                string TodoValue;
                List<TodoItem> items = new List<TodoItem>();
                string? message;
                bool cprValidated = false;

                protected override async Task OnInitializedAsync()
            {
                var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                UserID = state.User.FindFirstValue(ClaimTypes.NameIdentifier);
            }

            public bool ExistInDatabase()
            {
                if (UserID == null) return false;

                userCpr = UserCprRepository.GetByUserId(UserID);

                return userCpr != null;
            }

            public async Task OnSubmit()
            {
                if (!cprValidated)
                {
                    ValidateCpr();
                    if (cprValidated)
                    {
                        var allTodoItems = TodoRepository.GetByUserId(UserID);
                        items.AddRange(allTodoItems);
                        items.ForEach(x => x.ItemText = AsymmetricEncryptionHandler.Decrypt(x.ItemText));
                    }
                }
                else
                {
                    AddTodoItem();
                }
            }

            private void ValidateCpr()
            {
                if (string.IsNullOrEmpty(CprValue)) return;

                if (ExistInDatabase() && HashingHandler.Hash(CprValue, HashAlgorithm.SHA256, HashOutput.String) == userCpr?.Cpr)
                {
                    message = "CPR validated successfully.";
                    cprValidated = true;
                }
                else if (!ExistInDatabase())
                {
                    UserCprRepository.Add(new UserCpr { UserId = UserID, Cpr = HashingHandler.Hash(CprValue, HashAlgorithm.SHA256, HashOutput.String) });
                    cprValidated = true;
                }
                else
                {
                    message = "Incorrect CPR number";
                }
            }

            private void AddTodoItem()
            {
                if (!string.IsNullOrWhiteSpace(TodoValue))
                {

                    items.Add(new TodoItem { UserId = UserID, ItemText = TodoValue });
                    TodoRepository.Add(new TodoItem { UserId = UserID,ItemText = AsymmetricEncryptionHandler.Encrypt(TodoValue)});
                    TodoValue = ""; 
                    message = "Todo item added.";
                }
            }
            private void RemoveTodoItem(TodoItem item)
            {
                items.Remove(item);
                TodoRepository.Delete(item.Id); // Assuming TodoItem has an Id property
                message = "Todo item removed.";
            }
        }
    </div>
</body>
</html>

